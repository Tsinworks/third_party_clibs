include( CMakeParseArguments )

#file( READ opensslconf.h.in CONF )
#string( REPLACE "#undef OPENSSL_EXPORT_VAR_AS_FUNCTION" "#cmakedefine OPENSSL_EXPORT_VAR_AS_FUNCTION"
#    CONF "${CONF}" )

set(CONF "
#define OPENSSL_NO_GMP
#define OPENSSL_NO_JPAKE
#define OPENSSL_NO_KRB5
#define OPENSSL_NO_MD2
#define OPENSSL_NO_RFC3779
#define OPENSSL_NO_STORE
#define OPENSSL_NO_DYNAMIC_ENGINE
#define OPENSSL_NO_SCTP
#define OPENSSL_NO_EC_NISTP_64_GCC_128
${CONF}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/opensslconf.h.cmake "${CONF}")

set(BUILD_INFO "
#ifndef MK1MF_BUILD
  /* auto-generated by crypto/Makefile for crypto/cversion.c */
  #define CFLAGS \"@CMAKE_C_COMPILER@ @CMAKE_C_FLAGS@\"
  #define PLATFORM \"@CMAKE_SYSTEM_NAME@\"
  #define DATE \"@BUILDINF_DATE@\"
#endif
")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/buildinf.h.cmake "${BUILD_INFO}")

#~2DO: set BUILDINF_DATE to `date LC_ALL=C LC_TIME=C`
configure_file(${CMAKE_CURRENT_BINARY_DIR}/buildinf.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/include/buildinf.h)

if( WIN32 AND MINGW AND NOT CYGWIN )
  set( OPENSSL_EXPORT_VAR_AS_FUNCTION true )
endif()
configure_file(${CMAKE_CURRENT_BINARY_DIR}/opensslconf.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/openssl/opensslconf.h)

set( LIBSRC cryptlib.c mem.c mem_clr.c mem_dbg.c cversion.c ex_data.c cpt_err.c
  ebcdic.c uid.c o_time.c o_str.c o_dir.c o_init.c )

include_directories( BEFORE SYSTEM asn1 evp modes )

if( BUILD_SHARED_LIBS )
  add_definitions( -DOPENSSL_BUILD_SHLIBCRYPTO -DOPENSSL_EXPORT_VAR_AS_FUNCTION)
endif()

include_directories(${openssl_SOURCE_DIR}/include)
include_directories(${openssl_SOURCE_DIR}/crypto/include)

macro(add_submodule target dir)
    set(options)
    set(oneValueArgs "CATEGORY")
    set(multiValueArgs EXHEADERS)
    cmake_parse_arguments(add_submodule "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    foreach(name ${add_submodule_UNPARSED_ARGUMENTS})
        list(APPEND ${target}_SRCS ${dir}/${name})
    endforeach(name)

    source_group(${add_submodule_CATEGORY} FILES ${${target}_SRCS})
    set(LIBSRC ${LIBSRC} ${${target}_SRCS})
endmacro(add_submodule)

add_submodule(engine ../engines 
e_capi.c e_padlock.c
CATEGORY "engine"
)
add_submodule(engine ../engines/afalg 
e_afalg.c e_afalg_err.c
CATEGORY "engine"
)

# avoid conflict: ocsp.h and wincrypt.h
if( WIN32 AND NOT CYGWIN )
  set_property( SOURCE ../engines/e_capi.c APPEND PROPERTY COMPILE_DEFINITIONS HEADER_OCSP_H )
endif( WIN32 AND NOT CYGWIN )

add_submodule(aes aes 
  aes_misc.c aes_ecb.c aes_cfb.c aes_ofb.c aes_core.c
  aes_ige.c aes_wrap.c
  CATEGORY "aes"
)

# NO ASM
add_submodule(asn1 asn1 
a_object.c a_bitstr.c a_utctm.c a_gentm.c a_time.c a_int.c a_octet.c
a_print.c a_type.c a_dup.c a_d2i_fp.c a_i2d_fp.c
a_utf8.c a_sign.c a_digest.c a_verify.c a_mbstr.c a_strex.c
x_algor.c x_val.c x_sig.c x_bignum.c
x_long.c x_int64.c x_info.c x_spki.c nsseq.c
d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c
t_pkey.c t_spki.c t_bitst.c
tasn_new.c tasn_fre.c tasn_enc.c tasn_dec.c tasn_utl.c tasn_typ.c
tasn_prn.c tasn_scn.c ameth_lib.c
f_int.c f_string.c n_pkey.c
x_pkey.c bio_asn1.c bio_ndef.c asn_mime.c
asn1_gen.c asn1_par.c asn1_lib.c asn1_err.c a_strnid.c
evp_asn1.c asn_pack.c p5_pbe.c p5_pbev2.c p5_scrypt.c p8_pkey.c
asn_moid.c asn_mstbl.c
CATEGORY "asn1"
)

# NO ASM
add_submodule(async async
async.c async_wait.c async_err.c arch/async_posix.c arch/async_win.c
arch/async_null.c
CATEGORY "async"
)

add_submodule(bf bf
bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c
CATEGORY "bf"
)

# NO ASM
add_submodule(bio bio
bio_lib.c bio_cb.c bio_err.c
bss_mem.c bss_null.c bss_fd.c
bss_file.c bss_sock.c bss_conn.c
bf_null.c bf_buff.c b_print.c b_dump.c b_addr.c
b_sock.c b_sock2.c bss_acpt.c bf_nbio.c bss_log.c bss_bio.c
bss_dgram.c bio_meth.c bf_lbuf.c
CATEGORY "bio"
)

# NO ASM
add_submodule(blake2 blake2
blake2b.c blake2s.c m_blake2b.c m_blake2s.c
CATEGORY "blake2"
)

add_submodule(bn bn
bn_add.c bn_div.c bn_exp.c bn_lib.c bn_ctx.c bn_mul.c bn_mod.c
bn_print.c bn_rand.c bn_shift.c bn_word.c bn_blind.c
bn_kron.c bn_sqrt.c bn_gcd.c bn_prime.c bn_err.c bn_sqr.c
bn_recp.c bn_mont.c bn_mpi.c bn_exp2.c bn_gf2m.c bn_nist.c
bn_depr.c bn_const.c bn_x931p.c bn_intern.c bn_dh.c bn_srp.c
CATEGORY "bn"
)

#NO ASM
add_submodule(buffer buffer
buffer.c buf_err.c
CATEGORY "buffer"
)

add_submodule(camellia camellia
cmll_ecb.c cmll_ofb.c cmll_cfb.c cmll_ctr.c
CATEGORY "camellia"
)

add_submodule(cast cast
c_skey.c c_ecb.c c_cfb64.c c_ofb64.c
CATEGORY "cast"
)

if(BUILD_OBJECT_LIBRARY_ONLY)
  add_definitions(-DOPENSSL_THREADS)
  if( WIN32 AND MINGW AND NOT CYGWIN )
    add_definitions(-DDSO_WIN32 -DWIN32_LEAN_AND_MEAN)
  endif(WIN32 AND MINGW AND NOT CYGWIN)
  add_library(crypto OBJECT ${LIBSRC} ${OBJECTS_SRC})
  #set( crypto_headers ${EXHEADERS} )
  #list( REMOVE_ITEM crypto_headers ./opensslconf.h )
  #file( COPY ${crypto_headers} DESTINATION openssl )
else()
  add_library( crypto ${LIBSRC} ${OBJECTS_SRC} )

  if( WIN32 AND NOT CYGWIN )
    target_link_libraries( crypto ws2_32 crypt32 )
  endif()

  install( DIRECTORY ${PROJECT_SOURCE_DIR}/include
      DESTINATION ./ )

  install( TARGETS crypto
      RUNTIME DESTINATION bin
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib )
endif()